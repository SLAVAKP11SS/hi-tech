## @section Global parameters
## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass

## @param global.imageRegistry Global Docker image registry
## @param global.imagePullSecrets Global Docker registry secret names as an array
## @param global.storageClass Global StorageClass for Persistent Volume(s)
##
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""
  ## @param global.postgresql.postgresqlDatabase PostgreSQL database (overrides `postgresqlDatabase`)
  ## @param global.postgresql.postgresqlUsername PostgreSQL username (overrides `postgresqlUsername`)
  ## @param global.postgresql.existingSecret Name of existing secret to use for PostgreSQL passwords (overrides `existingSecret`)
  ## @param global.postgresql.postgresqlPassword PostgreSQL admin password (overrides `postgresqlPassword`)
  ## @param global.postgresql.servicePort PostgreSQL port (overrides `service.port`
  ## @param global.postgresql.replicationPassword Replication user password (overrides `replication.password`)
  ##
  postgresql:
    postgresqlDatabase: ""
    postgresqlUsername: ""
    existingSecret: ""
    postgresqlPassword: ""
    servicePort: ""
    replicationPassword: ""
nameOverride: ""
fullnameOverride: ""
extraDeploy: []
commonAnnotations: {}
##
diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity

image:
  registry: docker.io
  repository: bitnami/postgresql
  tag: 11.13.0-debian-10-r40
  pullPolicy: IfNotPresent
  pullSecrets: []
  debug: false

volumePermissions:
  enabled: true
  image:
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: 10-debian-10-r200
    pullPolicy: Always
    pullSecrets: []
  securityContext:
    runAsUser: 0

schedulerName: ""
lifecycleHooks: {}
securityContext:
  enabled: true
  fsGroup: 1001
containerSecurityContext:
  enabled: true
  runAsUser: 1001
serviceAccount:
  enabled: false
  name: ""
  autoMount: false
psp:
  create: false
rbac:
  create: false

replication:
  enabled: false
  user: repl_user
  password: repl_password
  readReplicas: 1
  synchronousCommit: "off"
  numSynchronousReplicas: 0
  applicationName: my_application
  singleService: true
  uniqueServices: false

postgresqlPostgresPassword: "postgres"
postgresqlUsername: "postgres"
postgresqlPassword: "postgres"
postgresqlDatabase: ""
postgresqlDataDir: /bitnami/postgresql/data

extraEnv: []
extraEnvVarsCM: ""
postgresqlInitdbArgs: ""
postgresqlInitdbWalDir: ""
postgresqlConfiguration: {}
postgresqlExtendedConf: {}

primaryAsStandBy:
  enabled: false
  primaryHost: ""
  primaryPort: ""
## @param pgHbaConfiguration PostgreSQL client authentication configuration
## Specify content for pg_hba.conf
## Default: do not create pg_hba.conf
## Alternatively, you can put your pg_hba.conf under the files/ directory
## pgHbaConfiguration: |-
##   local all all trust
##   host all all localhost trust
##   host mydatabase mysuser 192.168.0.0/24 md5
##
pgHbaConfiguration: ""
configurationConfigMap: ""
extendedConfConfigMap: ""
initdbScripts: {}
initdbScriptsConfigMap: ""
initdbScriptsSecret: ""
initdbUser: ""
initdbPassword: ""

audit:
  logHostname: false
  logConnections: false
  logDisconnections: false
  pgAuditLog: ""
  pgAuditLogCatalog: "off"
  clientMinMessages: error
  logLinePrefix: ""
  logTimezone: ""

postgresqlSharedPreloadLibraries: "pgaudit"
postgresqlMaxConnections: ""
postgresqlPostgresConnectionLimit: ""
postgresqlDbUserConnectionLimit: ""
postgresqlTcpKeepalivesInterval: ""
postgresqlTcpKeepalivesIdle: ""
postgresqlTcpKeepalivesCount: ""
postgresqlStatementTimeout: ""
postgresqlPghbaRemoveFilters: ""
terminationGracePeriodSeconds: ""

ldap:
  enabled: false
  url: ""
  server: ""
  port: ""
  prefix: ""
  suffix: ""
  baseDN: ""
  bindDN: ""
  bind_password: ""
  search_attr: ""
  search_filter: ""
  scheme: ""
  tls: ""

service:
  type: ClusterIP
  clusterIP: ""
  port: 5432
  nodePort: ""
  annotations: {}
  loadBalancerIP: ""
  externalTrafficPolicy: Cluster
  loadBalancerSourceRanges: []

shmVolume:
  enabled: true
  chmod:
    enabled: true
  sizeLimit: ""

persistence:
  enabled: true
  existingClaim: "postgresql"
  mountPath: /bitnami/postgresql
  subPath: ""
  storageClass: ""
  accessModes:
    - ReadWriteOnce
  size: 2Gi
  annotations: {}
  selector: {}

updateStrategy:
  type: RollingUpdate

primary:
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  extraPodSpec: {}
  labels: {}
  annotations: {}
  podLabels: {}
  podAnnotations: {}
  priorityClassName: ""
  extraInitContainers: []
  extraVolumeMounts: []
  extraVolumes: []

  sidecars: []
  service:
    type: ""
    nodePort: ""
    clusterIP: ""

readReplicas:
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []

  topologySpreadConstraints: []
  extraPodSpec: {}
  labels: {}
  annotations: {}
  podLabels: {}
  podAnnotations: {}
  priorityClassName: ""
  extraInitContainers: []
  extraVolumeMounts: []
  extraVolumes: []
  sidecars: []
  service:
    type: ""
    nodePort: ""
    clusterIP: ""
  ## @param readReplicas.persistence.enabled Whether to enable PostgreSQL read replicas replicas persistence
  ##
  persistence:
    enabled: true
  ## @param readReplicas.resources CPU/Memory resource requests/limits override for readReplicass. Will fallback to `values.resources` if not defined.
  ##
  resources: {}
## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
## @param resources.requests [object] The requested resources for the container
##
resources:
  requests:
    memory: 256Mi
    cpu: 250m
networkPolicy:
  ## @param networkPolicy.enabled Enable creation of NetworkPolicy resources. Only Ingress traffic is filtered for now.
  ##
  enabled: false
  ## @param networkPolicy.allowExternal Don't require client label for connections
  ## The Policy model to apply. When set to false, only pods with the correct
  ## client label will have network access to the port PostgreSQL is listening
  ## on. When true, PostgreSQL will accept connections from any source
  ## (with the correct destination port).
  ##
  allowExternal: true
  ## @param networkPolicy.explicitNamespacesSelector A Kubernetes LabelSelector to explicitly select namespaces from which ingress traffic could be allowed
  ## If explicitNamespacesSelector is missing or set to {}, only client Pods that are in the networkPolicy's namespace
  ## and that match other criteria, the ones that have the good label, can reach the DB.
  ## But sometimes, we want the DB to be accessible to clients from other namespaces, in this case, we can use this
  ## LabelSelector to select these namespaces, note that the networkPolicy's namespace should also be explicitly added.
  ##
  ## Example:
  ## explicitNamespacesSelector:
  ##   matchLabels:
  ##     role: frontend
  ##   matchExpressions:
  ##    - {key: role, operator: In, values: [frontend]}
  ##
  explicitNamespacesSelector: {}

startupProbe:
  enabled: false
  initialDelaySeconds: 30
  periodSeconds: 15
  timeoutSeconds: 5
  failureThreshold: 10
  successThreshold: 1

livenessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

readinessProbe:
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

customStartupProbe: {}
customLivenessProbe: {}
customReadinessProbe: {}

tls:
  enabled: false
  autoGenerated: false
  preferServerCiphers: true
  certificatesSecret: ""
  certFilename: ""
  certKeyFilename: ""
  certCAFilename: ""
  crlFilename: ""

metrics:
  enabled: false
  resources: {}
  service:
    type: ClusterIP
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9187"
    loadBalancerIP: ""

  serviceMonitor:
    enabled: false
    additionalLabels: {}
    namespace: ""
    interval: ""
    scrapeTimeout: ""
    relabelings: []
    metricRelabelings: []
  
  prometheusRule:
    enabled: false
    additionalLabels: {}
    namespace: ""
    rules: []

  image:
    registry: docker.io
    repository: bitnami/postgres-exporter
    tag: 0.10.0-debian-10-r68
    pullPolicy: IfNotPresent
    pullSecrets: []
  customMetrics: {}
  extraEnvVars: []

  securityContext:
    enabled: false
    runAsUser: 1001

  livenessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

